[project]
name = "outdoor_unit_cooler"
version = "0.1.0"
description = "エアコンが動作を開始すると自動的に室外機へのミスト噴射を行うシステムです。"
authors = [
    { name = "KIMATA Tetsuya", email = "kimata@green-rabbit.net" }
]

readme = "README.md"
requires-python = ">= 3.10"

dependencies = [
    "rpi-lgpio>=0.6",
    "flask>=3.1.0",
    "flask-cors>=5.0.1",
    "docopt-ng>=0.9.0",
    "influxdb-client[ciso]>=1.44.0",
    "my-lib @ git+https://github.com/kimata/my-py-lib@8a6a1f32acce7cb06a847f7876c3fffd982db636",
    "spidev>=3.7",
    "fluent-logger>=0.11.1",
    "pyzmq>=26.4.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/unit_cooler"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.rye]
managed = true
dev-dependencies = [
    "flaky>=3.8.1",
    "playwright>=1.45.1",
    "pytest-cov>=5.0.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
    "pytest-playwright>=0.5.1",
    "pytest-xdist>=3.6.1",
    "time-machine>=2.15.0",
    "pytest>=8.3.2",
    "pytest-timeout>=2.4.0",
]

[tool.pytest.ini_options]
minversion = "6.0"

# addopts = "--verbose --log-cli-level=DEBUG --log-file-level=DEBUG --log-format=\"%(asctime)s %(levelname)s %(message)s\" --log-format=\"%(asctime)s %(levelname)s [%(filename)s:%(lineno)s %(funcName)s] %(message)s\" --capture=sys  --html=tests/evidence/index.htm --self-contained-html --cov=flask --cov-report=html -vv"

addopts = "--verbose --log-file-level=DEBUG --log-format=\"%(asctime)s %(levelname)s %(message)s\" --log-format=\"%(asctime)s %(levelname)s [%(filename)s:%(lineno)s %(funcName)s] %(message)s\" --capture=sys  --html=tests/evidence/index.htm --self-contained-html --cov=src --cov-report=html -vv"


testpaths = [
    "tests",
]

filterwarnings = [
    "ignore:The hookimpl CovPlugin.pytest_configure_node uses",
    "ignore:The hookimpl CovPlugin.pytest_testnodedown uses",
]


[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",

  # 以下，未使用関数

  # config.py
  "def get_db_config",

  # logger.py
  "class GZipRotator",
  "def log_formatter",
  "if log_dir_path is not None:",
  "if log_queue is not None:",
  "if is_str_log:",

  # ltc2874.py
  "def dir_param_read",
  "def dir_param_write",

  # sensor_data.py
  "if create_empty and not last:",
  "def get_equip_on_minutes",
  "def get_equip_mode_period",
  "def dump_data",

  # notify_slack.py
  "def info",
  "def error_img",
  "def error_with_image",

  # webapp_event.py
  "if event_type == EVENT_TYPE.CONTROL:",
  "elif event_type == EVENT_TYPE.SCHEDULE:",

  # webapp_log.py
  "elif level == APP_LOG_LEVEL.WARN:",

  # flask_util.py
  "def remote_host",
  "def auth_user",
]

[tool.coverage.html]
directory = "tests/evidence/coverage"
