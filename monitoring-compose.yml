# 既存のcompose.yamlに追加する監視サービス
# 既存システムに影響を与えないサイドカー方式での監視

services:
    # 監視エージェント（サイドカーコンテナ）
    unit-cooler-monitoring:
        build:
            context: .
            dockerfile: monitoring.Dockerfile
        container_name: unit-cooler-monitoring
        restart: unless-stopped

        volumes:
            # 既存システムとの連携用
            - /dev/shm:/dev/shm:ro # ヘルスチェックファイル参照
            - /var/log:/var/log:ro # ログファイル参照
            - /proc:/host/proc:ro # システムメトリクス収集
            - /sys:/host/sys:ro # 温度センサー等
            - /var/run/docker.sock:/var/run/docker.sock:ro # Docker STDOUTログアクセス
            - monitoring_data:/data # メトリクス永続化

        ports:
            - "8081:8081" # メトリクスAPI（将来拡張用）

        environment:
            - MONITORING_INTERVAL=60 # 収集間隔（秒）
            - MONITORING_ENABLED=true # 監視有効化
            - LOG_LEVEL=INFO # ログレベル
            - PROMETHEUS_ENABLED=true # Prometheus出力

        # 既存サービスが起動してから開始
        depends_on:
            - unit-cooler

        networks:
            - hems

        # リソース制限（軽量に保つ）
        mem_limit: 128m
        cpus: 0.1

        # ヘルスチェック
        healthcheck:
            test:
                [
                    "CMD",
                    "test",
                    "-f",
                    "/tmp/unit_cooler_monitoring/metrics.json",
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s

    # オプション: Prometheus（メトリクス収集・可視化）
    prometheus:
        image: prom/prometheus:latest
        container_name: unit-cooler-prometheus
        restart: unless-stopped

        ports:
            - "9090:9090"

        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
            - prometheus_data:/prometheus

        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--storage.tsdb.retention.time=7d"
            - "--web.enable-lifecycle"

        networks:
            - hems

        # 監視エージェントの後に起動
        depends_on:
            - unit-cooler-monitoring

        profiles:
            - monitoring-full # 完全版の監視を有効化する場合のみ起動

    # オプション: Grafana（可視化ダッシュボード）
    grafana:
        image: grafana/grafana:latest
        container_name: unit-cooler-grafana
        restart: unless-stopped

        ports:
            - "3000:3000"

        volumes:
            - grafana_data:/var/lib/grafana
            - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
            - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro

        environment:
            - GF_SECURITY_ADMIN_PASSWORD=admin123 # デフォルトパスワード
            - GF_USERS_ALLOW_SIGN_UP=false

        networks:
            - hems

        depends_on:
            - prometheus

        profiles:
            - monitoring-full

# データ永続化用ボリューム
volumes:
    monitoring_data:
        driver: local
    prometheus_data:
        driver: local
    grafana_data:
        driver: local

# 既存ネットワークを使用
networks:
    hems:
        external: true
