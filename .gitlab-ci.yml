image: registry.green-rabbit.net:5000/kimata/local_ubuntu:250615_38f4fdb9

stages:
    - security
    - build-webapp
    - build-image
    - pre-test
    - test
    - deploy
    - renovate

variables:
    # Cache settings
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    DOCKER_BUILDKIT: 1
    DOCKER_CLI_EXPERIMENTAL: enabled
    # Test settings
    PYTEST_ADDOPTS: "--tb=short --strict-markers"

# Template for cache configuration
.cache_base:
    cache:
        key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
        paths:
            - .venv/
            - .cache/
            - .npm/

# Template for Docker cleanup
.docker_cleanup_base:
    before_script:
        - docker ps --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true
    after_script:
        - docker ps --filter "label=job=${CI_JOB_NAME}" -q | while read id; do docker stop -t 5 $id; done || true

# Security scanning
security-python:
    stage: security
    image: python:3.12-alpine
    script:
        - apk add --no-cache git gcc musl-dev libffi-dev openssl-dev
        - pip install safety
        - safety check || true
    only:
        - merge_requests
        - main
        - develop

security-docker:
    stage: security
    image: docker:24.0.7
    services:
        - docker:24.0.7-dind
    script:
        - docker pull registry.green-rabbit.net:5000/unit_cooler:latest || true
        - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL registry.green-rabbit.net:5000/unit_cooler:latest || true
    only:
        - merge_requests
        - main
        - develop

# Build stages
build-webapp:
    stage: build-webapp
    extends: .cache_base
    script:
        - cd webapp
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - lib/webapp/static
        expire_in: 1 week

build-image:
    stage: build-image
    image: docker:24.0.7
    services:
        - docker:24.0.7-dind
    needs: ["build-webapp"]
    script:
        - docker build -t registry.green-rabbit.net:5000/unit_cooler:latest .
        - docker push registry.green-rabbit.net:5000/unit_cooler:latest
    only:
        - main
        - develop

# Pre-test stage
pre-test:
    stage: pre-test
    script:
        - docker pull registry.green-rabbit.net:5000/unit_cooler:latest
        - uv run black --check app lib tests
        - uv run isort --check-only app lib tests

# Test stages
test-prepare:
    stage: test
    extends: .cache_base
    script:
        - uv pip install -r requirements-dev.lock
        - uv pip install -r requirements.lock

test-unit:
    stage: test
    extends: .cache_base
    script:
        - uv run pytest tests/test_config.py tests/test_influx.py tests/test_slack.py tests/test_notify.py tests/test_trigger.py --cov=lib --cov-report=html
    coverage: '/TOTAL.+?\s+(\d+%)$/'
    parallel: 1
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: coverage.xml
        paths:
            - htmlcov

test-controller-sample:
    stage: test
    extends: .docker_cleanup_base
    script:
        - uv run tests/test_controller.py --log_level WARN --mode sample --duration 2

test-controller-regular:
    stage: test
    extends: .docker_cleanup_base
    script:
        - uv run tests/test_controller.py --log_level INFO --mode regular --duration 45
    parallel:
        matrix:
            - TEST_NAME: [gw0, gw1, gw2, gw3, gw4, gw5, gw6, gw7]

test-actuator-sample:
    stage: test
    extends: .docker_cleanup_base
    script:
        - uv run tests/test_actuator.py --log_level WARN --mode sample --duration 2

test-actuator-regular:
    stage: test
    extends: .docker_cleanup_base
    script:
        - uv run tests/test_actuator.py --log_level INFO --mode regular --duration 15
    artifacts:
        name: "unit_cooler_test-webui-${CI_PIPELINE_ID}_${CI_JOB_ID}"
        paths:
            - data/*.png
            - data/*.log
            - data/test_*
        when: always
    parallel:
        matrix:
            - TEST_NAME: [gw0, gw1, gw2, gw3, gw4, gw5, gw6, gw7]

# Test with webapp
test-webapp-playwright:
    stage: test
    extends: .cache_base
    script:
        - apt-get update && apt-get install -y chromium chromium-driver
        - pip install pytest-playwright
        - playwright install chromium
        - export NO_SYSLOG=true
        - export CONFIG=tests/data/config.yaml
        - export DUMMY_MODE=true
        - export NO_INFLUX=true
        - export LOG_LEVEL=ERROR
        - nohup uv run webapp_flask.py > flask.log &
        - sleep 5
        - uv run tests/test_webapp_playwright.py --browser chromium
    artifacts:
        paths:
            - "tests/evidence/**"
        when: always

test-webui-docker:
    stage: test
    extends: .docker_cleanup_base
    script:
        - docker run --pull=always --rm -e NO_LOG_INIT -e CONFIG -v ${PWD}:/opt/unit_cooler registry.green-rabbit.net:5000/unit_cooler:latest uv run tests/test_webapp_flask.py
    variables:
        CONFIG: /opt/unit_cooler/tests/data/config.example.yaml

# Test with docker
test-docker-basic:
    stage: test
    extends: .docker_cleanup_base
    script:
        - docker run --rm --privileged registry.green-rabbit.net:5000/unit_cooler:latest uv run tests/test_trigger.py
        - docker run --rm --privileged -v /dev/bus/usb:/dev/bus/usb registry.green-rabbit.net:5000/unit_cooler:latest uv run tests/test_trigger.py

test-healthz-docker:
    stage: test
    extends: .docker_cleanup_base
    script:
        - |-
          docker run --rm -d --name unit_cooler --privileged registry.green-rabbit.net:5000/unit_cooler:latest
          sleep 10
          wget -q -O - http://$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' unit_cooler):5001/healthz | jq
          wget -q -O - http://$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' unit_cooler):5001/healthz | jq .result | grep true

# Test playwright (Matrix)
test-playwright-matrix:
    stage: test
    extends: .cache_base
    script:
        - apt-get update && apt-get install -y firefox-esr chromium chromium-driver
        - pip install pytest-playwright
        - playwright install --with-deps firefox chromium
        - export NO_SYSLOG=true
        - export CONFIG=tests/data/config.yaml
        - export DUMMY_MODE=true
        - export NO_INFLUX=true
        - export LOG_LEVEL=ERROR
        - nohup uv run webapp_flask.py > flask.log &
        - sleep 5
        - uv run tests/test_webapp_playwright.py --browser ${BROWSER} --gw ${GW}
    parallel:
        matrix:
            - BROWSER: ["firefox", "chromium"]
              GW: ["gw0", "gw1", "gw2", "gw3"]
    artifacts:
        paths:
            - "tests/evidence/**"
        when: always

test-walk-through:
    stage: test
    extends: .cache_base
    script:
        - |-
          lscpu | grep "Model name" | grep "Neoverse"
          [ $? -eq 0 ] && export HW_TYPE="OrangePi"
          lscpu | grep "Model name" | grep "Cortex-A76"
          [ $? -eq 0 ] && export HW_TYPE="RaspberryPi"
          echo "Run on ${HW_TYPE:-Unknown}"
          export NO_SYSLOG=true
          export CONFIG=tests/data/config.yaml
          export DUMMY_MODE=true
          export NO_INFLUX=true
          export LOG_LEVEL=ERROR
          export MEASURE_PERIOD_SEC=5
          export COOLER_DURATION_SEC=20
          export COOLER_PERIOD_MIN=2
          nohup uv run webapp_flask.py > flask.log &
          nohup uv run actuator.py > actuator.log &
          nohup uv run healthz.py > healthz.log &
          export LOG_LEVEL=WARN
          uv run controller.py --duration_sec 65
    artifacts:
        paths:
            - "*.log"

# Deploy stage
deploy-production:
    stage: deploy
    needs: ["test-controller-regular", "test-healthz-docker", "test-unit"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-controller
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
        - when: manual

# Renovate
renovate:
    stage: renovate
    image: registry.green-rabbit.net:5000/kimata/local_renovate:38
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} ${CI_PROJECT_PATH}
    rules:
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - if: '$CI_COMMIT_BRANCH == "main"'
          when: manual
