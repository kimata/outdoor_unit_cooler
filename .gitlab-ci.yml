image: registry.green-rabbit.net:5000/kimata/local_ubuntu:241105B

stages:
    - build-webapp
    - build-image
    - pre-test
    - test
    - deploy
    - renovate


build-react:
    stage: build-webapp
    image: node:24.1
    script:
        - cd react
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - react/dist
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .npm/


build-image:
    stage: build-image
    needs: ["build-react"]

    variables:
        BUILDER: arm_builder

    script:
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/unit_cooler.yaml config.yaml
        - docker buildx create --driver docker-container --name ${BUILDER} --use --config /etc/buildkitd.toml
        - docker buildx use ${BUILDER}
        - docker buildx inspect --bootstrap
        - docker buildx build --provenance=false --progress=plain --platform linux/amd64,linux/arm64/v8 --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds) --push --tag ${CI_REGISTRY_IMAGE} .

    dependencies:
        - build-react


test-prepare:
    stage: pre-test

    script:
        - rye sync

    artifacts:
        paths:
            - .venv
            - /root/.cache

    cache:
        key: ${CI_JOB_NAME}
        paths:
            - .venv
            - /root/.cache



test-controller-sample:
    stage: test
    needs: ["build-image"]
    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker run --rm --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -c config.example.yaml -N -n 1


test-controller-regular:
    stage: test
    needs: ["build-image"]
    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker run --rm --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -N -n 1

test-actuator-sample:
    stage: test
    needs: ["build-image"]
    variables:
        CONTROL_HOST: 192.168.0.20
        CURL_IMAGE: curlimages/curl:8.1.2
    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -d
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - 'echo "Controller: ${CTRL_IP}"'
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -n 3 -d -c config.example.yaml -s $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - sleep 10
        # NOTE: Fail した時の原因究明用にこの時点のログを保存する
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_1.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - docker run --rm ${CURL_IMAGE} --head http://$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2):5001/unit_cooler/api/log_view
        - docker attach --no-stdin ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_2.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
    artifacts:
        when: always
        paths:
            - controller_log_1.txt
            - controller_log_2.txt
            - actuator_log.txt

test-actuator-regular:
    stage: test

    needs:
        - build-image

    variables:
        CURL_IMAGE: curlimages/curl:8.1.2
    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -d
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - 'echo "Controller: ${CTRL_IP}"'
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -n 3 -d -s $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - sleep 10
        # NOTE: Fail した時の原因究明用にこの時点のログを保存する
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_1.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - ACT_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - 'echo "Actuator: ${ACT_IP}"'
        - docker run --rm ${CURL_IMAGE} --head http://$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2):5001/unit_cooler/api/log_view
        - docker attach --no-stdin ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_2.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
    artifacts:
        when: always
        paths:
            - controller_log_1.txt
            - controller_log_2.txt
            - actuator_log.txt


test-webui-docker:
    stage: test

    needs:
        - build-image
        - test-prepare

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - python3 -m playwright install

        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -d
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - 'echo "Controller: ${CTRL_IP}"'
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -d -s $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - ACT_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - 'echo "Actuator: ${ACT_IP}"'
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-3 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/webui.py -s $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1) -a $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - sleep 10
        # NOTE: Fail した時の原因究明用にこの時点のログを保存する
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log.txt
        - WEB_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-3)
        - 'echo "Actuator: ${WEB_IP}"'
        - rye run pytest tests/test_playwright.py --host $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-3)
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-3
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .venv

    artifacts:
        when: always
        paths:
            - controller_log.txt
            - actuator_log.txt
            - webui_log.txt
            - tests/evidence/**


test-healthz-docker:
    stage: test

    needs:
        - build-image

    script:
        # NOTE: テストに失敗するとテスト用のコンテナが残るので削除する
        - docker ps  --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true

        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - 'echo "Controller: ${CTRL_IP}"'
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -d -s $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - ACT_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - 'echo "Actuator: ${ACT_IP}"'
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-3 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/webui.py -s $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1) -a $(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - sleep 120
        # NOTE: healthz をチェックする前にその時点のログを取得しておく
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log.txt
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID}-1 ./src/healthz.py -m CTRL
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID}-2 ./src/healthz.py -m ACT
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID}-3 ./src/healthz.py -m WEB
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-3
    artifacts:
        when: always
        paths:
            - controller_log.txt
            - actuator_log.txt
            - webui_log.txt


test-walk-through:
    stage: test

    needs:
        - build-react
        - test-prepare

    script:
        - rye run pytest --timeout=60 --forked --reruns 3 --numprocesses=8 --verbosity=1 tests/test_basic.py

    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .venv

    artifacts:
        when: always
        paths:
            - tests/evidence/**

deploy-controller:
    stage: deploy
    needs: ["test-controller-regular", "test-healthz-docker", "test-walk-through"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-controller
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success


deploy-actuator:
    stage: deploy
    needs: ["test-actuator-regular", "test-healthz-docker", "test-walk-through"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-actuator
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success


deploy-webui:
    stage: deploy
    needs: ["test-webui-docker", "test-healthz-docker", "test-walk-through"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-webui
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success


deploy-webui-demo:
    stage: deploy
    needs: ["test-webui-docker", "test-healthz-docker", "test-walk-through"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-webui-demo
    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success


renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:36
        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
        # # NOTE: ついでにお掃除
        #  - docker rm $(docker ps -a --filter "status=exited" -q) || true
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - changes:
            - renovate.json
