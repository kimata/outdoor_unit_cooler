image: registry.green-rabbit.net:5000/kimata/local_ubuntu:241105B

stages:
    - security
    - build-webapp
    - build-image
    - pre-test
    - test
    - deploy
    - renovate

variables:
    # Cache settings
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    DOCKER_BUILDKIT: 1
    DOCKER_CLI_EXPERIMENTAL: enabled
    # Test settings
    PYTEST_ADDOPTS: "--tb=short --strict-markers"

# Global cache settings
.cache_template: &cache_template
    cache:
        key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
        paths:
            - .venv/
            - .cache/
            - .npm/

# Cleanup template for Docker containers
.cleanup_template: &cleanup_template
    before_script:
        - docker ps --filter "label=job=${CI_JOB_NAME}" | grep hours | cut -d " " -f1 | while read id; do docker stop -t 5 $id; done || true
    after_script:
        - docker ps --filter "label=job=${CI_JOB_NAME}" -q | while read id; do docker stop -t 5 $id; done || true

# Security scanning
security-python:
    stage: security
    image: python:3.12-alpine
    script:
        - pip install safety bandit
        - rye sync
        - safety check --json || true
        - bandit -r src/ -f json -o bandit-report.json || true
    artifacts:
        reports:
            sast: bandit-report.json
        expire_in: 1 week
    rules:
        - changes:
            - "**/*.py"
            - "requirements.txt"
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

security-docker:
    stage: security
    image: docker:stable
    services:
        - docker:dind
    script:
        - docker run --rm -v "$PWD":/app -w /app hadolint/hadolint hadolint Dockerfile
    rules:
        - changes:
            - "Dockerfile"
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Build stages
build-react:
    stage: build-webapp
    image: node:24-alpine
    script:
        - cd react
        - npm ci --cache .npm --prefer-offline
        - npm run build
    artifacts:
        paths:
            - react/dist
        expire_in: 1 hour
    cache:
        key: "react-${CI_COMMIT_REF_SLUG}"
        paths:
            - react/node_modules/
            - .npm/
    rules:
        - changes:
            - "react/**/*"
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build-image:
    stage: build-image
    needs: ["build-react"]
    variables:
        BUILDER: arm_builder_${CI_JOB_ID}
    script:
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/hems_config.git
        - mv hems_config/unit_cooler.yaml config.yaml
        - docker buildx create --driver docker-container --name ${BUILDER} --use --config /etc/buildkitd.toml
        - docker buildx use ${BUILDER}
        - docker buildx inspect --bootstrap
        - |
          docker buildx build \
              --provenance=false \
              --progress=plain \
              --platform linux/amd64,linux/arm64/v8 \
              --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache \
              --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max \
              --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds) \
              --push \
              --tag ${CI_REGISTRY_IMAGE} .
    dependencies:
        - build-react
    after_script:
        - docker buildx rm ${BUILDER} || true

# Test preparation
test-prepare:
    stage: pre-test
    script:
        - rye sync
    artifacts:
        paths:
            - .venv
        expire_in: 1 hour
    !!merge <<: *cache_template

# Unit tests with improved parallel execution
test-unit:
    stage: test
    needs: ["test-prepare"]
    script:
        - rye run pytest --timeout=60 --forked --reruns 3 --numprocesses=auto --verbosity=1 --html=tests/evidence/index.htm --self-contained-html tests/test_basic.py tests/test_error_handling.py
    !!merge <<: *cache_template
    artifacts:
        when: always
        paths:
            - tests/evidence/**
        reports:
            junit: tests/evidence/junit.xml
        expire_in: 1 week
    coverage: '/TOTAL.*\s+(\d+%)$/'

# Integration tests
test-controller-sample:
    stage: test
    needs: ["build-image"]
    !!merge <<: *cleanup_template
    script:
        - docker run --rm --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -c config.example.yaml -N -n 1

test-controller-regular:
    stage: test
    needs: ["build-image"]
    !!merge <<: *cleanup_template
    script:
        - docker run --rm --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -N -n 1

test-actuator-sample:
    stage: test
    needs: ["build-image"]
    variables:
        CURL_IMAGE: curlimages/curl:8.1.2
    !!merge <<: *cleanup_template
    script:
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -d
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - echo "Controller IP: ${CTRL_IP}"
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -n 3 -d -c config.example.yaml -s ${CTRL_IP}
        - sleep 10
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_1.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - ACT_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - docker run --rm ${CURL_IMAGE} --head http://${ACT_IP}:5001/unit_cooler/api/log_view
        - docker attach --no-stdin ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_2.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
    artifacts:
        when: always
        paths:
            - controller_log_1.txt
            - controller_log_2.txt
            - actuator_log.txt
        expire_in: 1 week

test-actuator-regular:
    stage: test
    needs: ["build-image"]
    variables:
        CURL_IMAGE: curlimages/curl:8.1.2
    !!merge <<: *cleanup_template
    script:
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -d
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - echo "Controller IP: ${CTRL_IP}"
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -n 3 -d -s ${CTRL_IP}
        - sleep 10
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_1.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - ACT_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - echo "Actuator IP: ${ACT_IP}"
        - docker run --rm ${CURL_IMAGE} --head http://${ACT_IP}:5001/unit_cooler/api/log_view
        - docker attach --no-stdin ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_2.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
    artifacts:
        when: always
        paths:
            - controller_log_1.txt
            - controller_log_2.txt
            - actuator_log.txt
        expire_in: 1 week

test-webui-docker:
    stage: test
    needs:
        - build-image
        - test-prepare
    !!merge <<: *cleanup_template
    script:
        - python3 -m playwright install --with-deps
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py -d
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - echo "Controller IP: ${CTRL_IP}"
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -d -s ${CTRL_IP}
        - ACT_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - echo "Actuator IP: ${ACT_IP}"
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-3 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/webui.py -s ${CTRL_IP} -a ${ACT_IP}
        - sleep 10
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log.txt
        - WEB_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-3)
        - echo "WebUI IP: ${WEB_IP}"
        - rye run pytest tests/test_playwright.py --host ${WEB_IP} --html=tests/evidence/playwright.html
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_final.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log_final.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log_final.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-3
    cache:
        key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
        paths:
            - .venv/
            - .cache/
            - .npm/
    artifacts:
        when: always
        paths:
            - controller_log*.txt
            - actuator_log*.txt
            - webui_log*.txt
            - tests/evidence/**
        expire_in: 1 week

test-healthz-docker:
    stage: test
    needs: ["build-image"]
    !!merge <<: *cleanup_template
    script:
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-1 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/controller.py
        - CTRL_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-1)
        - echo "Controller IP: ${CTRL_IP}"
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-2 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/actuator.py -d -s ${CTRL_IP}
        - ACT_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CI_JOB_NAME}-${CI_JOB_ID}-2)
        - echo "Actuator IP: ${ACT_IP}"
        - docker run --rm --detach=true --tty=true --name ${CI_JOB_NAME}-${CI_JOB_ID}-3 --label job=${CI_JOB_NAME} ${CI_REGISTRY_IMAGE} ./src/webui.py -s ${CTRL_IP} -a ${ACT_IP}
        - sleep 120
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log.txt
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID}-1 ./src/healthz.py -m CTRL
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID}-2 ./src/healthz.py -m ACT
        - docker exec ${CI_JOB_NAME}-${CI_JOB_ID}-3 ./src/healthz.py -m WEB
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-1 > controller_log_final.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-2 > actuator_log_final.txt
        - docker logs ${CI_JOB_NAME}-${CI_JOB_ID}-3 > webui_log_final.txt
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-1
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-2
        - docker stop ${CI_JOB_NAME}-${CI_JOB_ID}-3
    artifacts:
        when: always
        paths:
            - controller_log*.txt
            - actuator_log*.txt
            - webui_log*.txt
        expire_in: 1 week

# Parallel test execution for faster feedback
test-walk-through:
    stage: test
    needs:
        - build-react
        - test-prepare
    parallel:
        matrix:
            - TEST_SUITE: "basic"
            - TEST_SUITE: "error_handling"
    script:
        - |
          if [ "$TEST_SUITE" == "basic" ]; then
              rye run pytest --timeout=60 --forked --reruns 3 --numprocesses=auto --verbosity=1 tests/test_basic.py
          elif [ "$TEST_SUITE" == "error_handling" ]; then
              rye run pytest --timeout=60 --forked --reruns 3 --numprocesses=auto --verbosity=1 tests/test_error_handling.py
          fi
    !!merge <<: *cache_template
    artifacts:
        when: always
        paths:
            - tests/evidence/**
        expire_in: 1 week

# Deploy jobs (unchanged but with better dependencies)
deploy-controller:
    stage: deploy
    needs: ["test-controller-regular", "test-healthz-docker", "test-unit"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-controller
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

deploy-actuator:
    stage: deploy
    needs: ["test-actuator-regular", "test-healthz-docker", "test-unit"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-actuator
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

deploy-webui:
    stage: deploy
    needs: ["test-webui-docker", "test-healthz-docker", "test-unit"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-webui
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

deploy-webui-demo:
    stage: deploy
    needs: ["test-webui-docker", "test-healthz-docker", "test-unit"]
    image:
        name: bitnami/kubectl:latest
        entrypoint: [""]
    script:
        - kubectl config get-contexts
        - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
        - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-webui-demo
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

# Renovate (improved with better conditions)
renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:36
        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
        - changes:
            - renovate.json
          if: '$CI_COMMIT_BRANCH == "master"'
